// JODI: this could be obtained by outside_os (-1) for all functions except zeromask!
// infact the index contained in the class is excatly the enumeration if you subtract 1.
// This forces me to believe that the class should be replaced by a simple enumeration containing the 
// actual indecies directly, and have teh zero mask definition outside.
// as
namespace triton { namespace gateway {
enum Gateway_enum {
  outside_os = 0x00, // previously 1 and if needed this could be 1 and we could have a indexer function to handle the lookup! as the commented function below!
  non_shared_high,
  non_shared_medium,
  non_shared_low,
  gateway_5,
  gateway_6,
  gateway_7,
  shared_high,
  shared_medium,
  shared_low,
  size
};
const int zeromask = 0;
//inline const uint32 value2index(index){return index +1;}
}}; // triton::gateway

/// ***************************************************************
/// AUTOGENERATED DO NOT ADD,DELETE OR CHANGE ANYTHING IN THIS FILE
/// ***************************************************************
///
// Copyright (c) MAN Diesel & Turbo
/// @file
/// @ingroup triton

// Suppressions in generated class:

// AV Rule 151 Literal of type 'int' found inside function. Use constants in stead.
// Generated class contains static functions returning constants.
// PRQA S 4400 EOF

#ifndef GATEWAY_ENUM
#define GATEWAY_ENUM

#include <stdint.h>

namespace triton {

/// Instance enum class for values available for Gateway_enum.
/// 
/// It contains static functions returning an object for each valid value.
/// The returned objects might carry extra information e.g. bit position, index, associated value.
/// 
class Gateway_enum
{
public:

  static const Gateway_enum zero_mask();
  static const Gateway_enum outside_os();
  static const Gateway_enum non_shared_high();
  static const Gateway_enum non_shared_medium();
  static const Gateway_enum non_shared_low();
  static const Gateway_enum gateway_5();
  static const Gateway_enum gateway_6();
  static const Gateway_enum gateway_7();
  static const Gateway_enum shared_high();
  static const Gateway_enum shared_medium();
  static const Gateway_enum shared_low();

  static uint8_t size();

  uint32_t value() const;

  /// Get index of enum.
  /// Utilized internally for indexing "regenum"-registers.
  uint32_t index() const;
private:
  explicit Gateway_enum(uint32_t value_, uint32_t index_);

  uint32_t val;
  uint32_t idx;

};

inline Gateway_enum::Gateway_enum(uint32_t value_, uint32_t index_) :
  val(value_), idx(index_) {}

inline uint32_t Gateway_enum::value() const { return val; }

inline uint32_t Gateway_enum::index() const { return idx; }


inline const Gateway_enum Gateway_enum::zero_mask() { return Gateway_enum(0x0, 0); }
inline const Gateway_enum Gateway_enum::outside_os() { return Gateway_enum(1, 0); }
inline const Gateway_enum Gateway_enum::non_shared_high() { return Gateway_enum(2, 1); }
inline const Gateway_enum Gateway_enum::non_shared_medium() { return Gateway_enum(3, 2); }
inline const Gateway_enum Gateway_enum::non_shared_low() { return Gateway_enum(4, 3); }
inline const Gateway_enum Gateway_enum::gateway_5() { return Gateway_enum(5, 4); }
inline const Gateway_enum Gateway_enum::gateway_6() { return Gateway_enum(6, 5); }
inline const Gateway_enum Gateway_enum::gateway_7() { return Gateway_enum(7, 6); }
inline const Gateway_enum Gateway_enum::shared_high() { return Gateway_enum(8, 7); }
inline const Gateway_enum Gateway_enum::shared_medium() { return Gateway_enum(9, 8); }
inline const Gateway_enum Gateway_enum::shared_low() { return Gateway_enum(10, 9); }

inline uint8_t Gateway_enum::size() { return 10; }

}; // triton

#endif // GATEWAY_ENUM
